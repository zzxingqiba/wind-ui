@use 'root/var' as *;
@use 'mixins/mixins' as *;

@include b(button) {
  @include set-component-css-var('button', $button);
}

@include b(button) {
  @each $type in (primary, success, warning, error, info) {
    @include m($type) {
      @include button-var($type)
    }
  }
}

@include b(button) {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  position: relative;
  line-height: 1;
  white-space: nowrap;
  text-align: center;
  box-sizing: border-box;
  outline: none;
  user-select: none;
  vertical-align: middle;
  -webkit-appearance: none;
  transition: 0.1s;
  cursor: pointer;
  background-color: transparent;
  border: getCssVar('border');
  border-color: getCssVar('button', 'border-color');
  font-size: getCssVar('font-size');
  font-weight: getCssVar('font-weight');
  color: getCssVar('button', 'text-color');
  border-radius: getCssVar('border-radius', 'base');
  padding: getCssVar('spacing', 'normal')
    getCssVar('spacing', 'large');

  &:hover,
  &:focus {
    color: getCssVar('button', 'hover', 'text-color');
    border-color: getCssVar('button', 'hover', 'border-color');
    outline: none;
  }

  &:active {
    color: getCssVar('button', 'active' 'text-color');
    border-color: getCssVar('button', 'active', 'border-color');
  }

  > span {
    display: inline-flex;
    align-items: center;
    & + [class^=#{$namespace + $common-separator + 'icon'}] {
      margin-left: getCssVar('spacing', 'small');
    }
  }

  @include b(button-base-wave) {
    @include  set-css-var-value('base-wave-color', getCssVar('color-primary'))
  }

  @include when(bold) {
    font-weight: getCssVar('font-weight', 'bold');
  }

  @include when(round) {
    border-radius: getCssVar('border-radius', 'round');
  }

  @include when(circle) {
    border-radius: getCssVar('border-radius', 'circle');
    padding: getCssVar('spacing', 'normal');
  }

  @include when(dashed) {
    border-style: getCssVar('border-style', 'dashed');
  }

  @include when(text) {
    background-color: transparent;
    border: none;
    &:hover,
    &:focus,
    &:active {
      color: getCssVar('button', 'text-color');
      background-color: getCssVar('color-gray-bg');
    }
    @include when(disabled) {
      &,
      &:hover,
      &:focus {
        background-color: transparent;
      }
    }
  }

  @include when(disabled) {
    background-color: getCssVar('button', 'disabled', 'bg-color');
    color: getCssVar('button', 'disabled', 'text-color',);
    &,
    &:hover,
    &:focus {
      cursor: not-allowed;
      background-image: none;
      border-color: getCssVar('button', 'disabled', 'border-color');
      background-color: transparent;
      color: getCssVar('button', 'disabled', 'text-color');
    }
  }

  @each $size in (mini, small, large) {
    @include m($size) {
      font-size: getCssVar('font-size');
      @if $size == mini {
        font-size: getCssVar('font-size', 'mini');
        padding: getCssVar('spacing', 'mini')
          getCssVar('spacing', 'mini');
      }
      @if $size == small {
        font-size: getCssVar('font-size', 'small');
        padding: getCssVar('spacing', 'small')
          getCssVar('spacing', 'small');
      }
      @if $size == large {
        font-size: getCssVar('font-size', 'large');
        padding: getCssVar('spacing', 'normal')
          getCssVar('spacing', 'large');
      }
      @include when(circle) {
        padding: getCssVar('spacing', $size);
      }
    }
  }

  @each $type in (primary, info, error, success, warning) {
    @include m($type) {
      color: getCssVar('button', 'text-color');
      background-color: getCssVar('button', 'bg-color');
      border-color: transparent;
      &:hover,
      &:focus {
        color: getCssVar('button', 'hover', 'text-color');
        border-color: getCssVar('button', 'hover', 'border-color');
        background-color: getCssVar('button', 'hover', 'bg-color');
        outline: none;
      }
      &:active {
        border-color: getCssVar('button', 'active', 'border-color');
        background-color: getCssVar('button', 'active', 'bg-color');
      }

      @include b(button-base-wave) {
        @include  set-css-var-value('base-wave-color', getCssVar('color', $type))
      }

      @include when(plain) {
        background-color: getCssVar('color', $type, 'light-2');
        color: getCssVar('color', $type);
        &:hover,
        &:focus {
          background-color: getCssVar('color', $type);
          color: getCssVar('color-white');
        }
        @include when(disabled) {
          &,
          &:hover,
          &:focus {
            border-color: transparent;
            background-color: getCssVar('color', $type, 'light-3');
            color: getCssVar('color', $type, 'dark-2');
          }
        }
      }

      @include when(dashed) {
        color: getCssVar('button', 'bg-color');
        border-style: getCssVar('border-style', 'dashed');
        border-color: getCssVar('button', 'border-color');
        background-color: transparent;
        &:hover,
        &:focus {
          color: getCssVar('button', 'bg-color');
          border-color: getCssVar('button', 'border-color');
        }
        @include when(disabled) {
          background-color: transparent;
          color: getCssVar('button', 'disabled', 'bg-color');
          &,
          &:hover,
          &:focus {
            background-color: transparent;
            color: getCssVar('button', 'disabled', 'bg-color');
          }
        }
      }
      @include when(text) {
        color: getCssVar('button', 'bg-color');
        background-color: transparent;
        border: none;
        &:hover,
        &:focus,
        &:active {
          background-color: getCssVar('color-gray-bg');
          color: getCssVar('button', 'bg-color');
        }
        @include when(disabled) {
          background-color: transparent;
          color: getCssVar('button', 'disabled', 'bg-color');
          &,
          &:hover,
          &:focus {
            background-color: transparent;
            color: getCssVar('button', 'disabled', 'bg-color');
          }
        }
      }
      @include when(disabled) {
        color: getCssVar('button', 'disabled', 'text-color');
        background-color: getCssVar('button', 'disabled', 'bg-color');
        border-color: getCssVar('button', 'disabled', 'border-color');
        &,
        &:hover,
        &:focus {
          color: getCssVar('button', 'disabled', 'text-color');
          background-color: getCssVar('button', 'disabled', 'bg-color');
          border-color: getCssVar('button', 'disabled', 'border-color');
        }
      }
    }
  }
}
